import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns
import scikit_posthocs as sp

# Load final grades data
def load_final_grades(filepath):
    return pd.read_excel(filepath)

# Prepare data by assigning topic labels to each ANON_ID based on the provided mapping
def prepare_data(grades, topic_mapping):
    topic_list = [(id, topic) for topic, ids in topic_mapping.items() for id in ids]
    topic_df = pd.DataFrame(topic_list, columns=['ANON_ID', 'Topic'])
    merged_data = pd.merge(topic_df, grades, on='ANON_ID', how='inner')
    return merged_data

# Perform Kruskal-Wallis Test
def perform_kruskal_wallis(data):
    grouped_data = data.groupby('Topic')['Final Score'].apply(list).to_dict()
    scores = list(grouped_data.values())
    k_stat, p_val = stats.kruskal(*scores)
    return k_stat, p_val, grouped_data

# Post-hoc analysis using Conover's test
def conover_posthoc_test(data):
    data['Topic'] = data['Topic'].astype(str)  # Ensure that the 'Topic' column is treated as categorical
    posthoc_results = sp.posthoc_conover(data, val_col='Final Score', group_col='Topic', p_adjust='bonferroni')
    return posthoc_results

# Plotting
def plot_final_scores(data):
    sns.boxplot(x='Topic', y='Final Score', data=data)
    plt.title('Final Scores by Topic')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


def main():
    filepath = 'FinalGrades.xlsx'
    topic_mapping = {0: [1568, 1184, 1585, 1398, 1358, 1059, 1718, 1046, 1223, 1672, 1570, 1513, 1098, 1239, 1820, 1062, 1651, 1455, 1045, 1818, 1142, 1444, 1405, 1008, 1761, 1409, 1066, 1282, 1578, 1644, 1721, 1699, 1571, 1003, 1349, 1044, 1824, 1124, 1642, 1188, 1387, 1379, 1377, 1345, 1864, 1156, 1895, 1715, 1283, 1119, 1619, 1751, 1139, 1859, 1819, 1890, 1564, 1723, 1145, 1836, 1303, 1792, 1599, 1257, 1434, 1207, 1719, 1225, 1376, 1706, 1143, 1371, 1779, 1380, 1246, 1632, 1242, 1808, 1425, 1606, 1271, 1141, 1826, 1754, 1125, 1330], 1: [1827, 1327, 1175, 1815, 1186, 1712, 1406, 
1311, 1179, 1296, 1092, 1103, 1347, 1658, 1180, 1708, 1782, 1800, 1612, 1426, 1336, 1504, 1047, 1806, 1026, 1199, 1643, 1447, 1810, 1537, 1657, 1703, 1364, 1164, 1146, 1493, 1668, 1863, 1256, 1314, 1420, 1546, 1624, 1517, 1301, 1140, 1637, 1431, 1899, 1086, 1237, 1421, 1666, 1173, 1363, 1614, 1600, 1280, 1043, 1851, 1422, 1660, 1418, 1872, 1777, 1545, 1351, 1369, 1471, 1070, 1882, 1187, 1514, 1630, 1655, 1400, 1273, 1549, 
1053, 1734, 1159, 1567, 1861, 1888, 1817, 1746, 1294, 1326, 1873, 1793, 1618, 1664, 1832, 1515, 1533, 1797, 1608, 1399, 1856, 1654, 1265], 2: 
[1174, 1309, 1875, 1078, 1214, 1783, 1650, 1729, 1604, 1631, 1445, 1193, 1429, 1489, 1069, 1532, 1206, 1049, 1739, 1685, 1494, 1593, 1450, 1382, 1784, 1700, 1039, 1333, 1694, 1554, 1203, 1307, 1495, 1396, 1713, 1082, 1226, 1731, 1693, 1185, 1725, 1306, 1087, 1338, 1866, 1101, 1171, 1544, 1293, 1275, 1503, 1443, 1322, 1011, 1009, 1162], 3: [1147, 1395, 1467, 1261, 1321, 1780, 1359, 1157, 1014, 1384, 1073, 1019, 1587, 1512, 
1104, 1408, 1716, 1662, 1452, 1135, 1366, 1795, 1617, 1689, 1753, 1318, 1137, 1091, 1547, 1647, 1809, 1732, 1799, 1213, 1017, 1316, 1748, 1530, 1880, 1374, 1067, 1144, 1240, 1244, 1224, 1556, 1636, 1353, 1538, 1653, 1894, 1440, 1181, 1000, 1487, 1176, 1033, 1004, 1638, 1675, 1522, 1339, 1743, 1787, 1705, 1300, 1182, 1580, 1807, 1061, 1825, 1741, 1054, 1393, 1167, 1105], 4: [1603, 1065, 1262, 1558, 1846, 1010, 1737, 1332, 1148, 1029, 1652, 1392, 1299, 1165, 1209, 1611, 1161, 1320, 1238, 1531, 1192, 1436, 1037, 1548, 1007, 1589, 1088, 1249, 1298, 1241, 1136, 1778, 1823, 1633, 1197, 1749, 1346, 1021, 1439, 1577, 1464, 1304, 1722, 1362, 1507, 1869, 1016, 1829, 1015, 1579, 1629, 1281, 1356, 1516, 1682, 1229, 1216, 1386, 1470, 1269, 1573, 1268, 1616, 1842, 1707, 1540, 1849, 1473, 1131, 1323, 1735], 5: [1424, 1476, 1050, 1177, 1521, 1609, 1449, 1854, 1023, 1550, 1433, 1255, 1697, 1830, 1868, 1889, 1529, 1485, 1451, 1002, 1113, 1583, 1305, 1563, 1055, 1328, 1370, 1094, 1837, 1681, 1423, 
1841, 1075, 1591, 1582, 1553, 1292, 1025, 1030, 1110, 1860, 1072, 1883, 1375, 1511, 1252, 1410, 1071, 1461, 1677, 1770, 1690], 6: [1099, 1264, 1412, 1389, 1601, 1645, 1594, 1022, 1488, 1742, 1756, 1286, 1168, 1041, 1132, 1857, 1788, 1093, 1028, 1251, 1381, 1640, 1853, 1768, 1738, 1769, 1565, 1798, 1218, 1416, 1272, 1313, 1397, 1267, 1479, 1258, 1217, 1588, 1158, 1840, 1253, 1785, 1518, 1592, 1676, 1773, 1498, 1477, 1133, 1417, 1508, 1847, 1116, 1221, 1052, 1097], 7: [1661, 1383, 1717, 1466, 1696, 1402, 1813, 1686, 1584, 1001, 1858, 1401, 1235, 1437, 1465, 1898, 
1620, 1821, 1183, 1172, 1726, 1357, 1834, 1816, 1492, 1287, 1597, 1342, 1887, 1812, 1308, 1076, 1036, 1195, 1024, 1714, 1407, 1835, 1886, 1430, 1639, 1602, 1736, 1878, 1312, 1284, 1295, 1200, 1523, 1822, 1865, 1254, 1559, 1248, 1138, 1762, 1586, 1667, 1733, 1435, 1018, 1543, 1259, 1219], 8: [1083, 1670, 1505, 1074, 1499, 1100, 1649, 1211, 1621, 1331, 1414, 1042, 1896, 1027, 1368, 1260, 1155, 1626, 1501, 1233, 1006, 1189, 1085, 1839, 1108, 1881, 1109, 1747, 1483, 1297, 1222, 1079, 1288, 1329, 1500, 1432, 1090, 1419, 1160, 1581, 1774, 1403, 1169, 1245, 1365, 1557, 1344, 1372, 1166, 1355, 1270, 1404, 1683, 1310, 1772, 1232, 1551, 1354, 1228, 1528, 1031, 1486, 1460, 1623, 1526, 1114, 1634, 1506, 1279, 1348, 1811, 1771, 1415, 1698, 1278, 1510, 1845, 1352, 1291, 1764, 1760, 1566, 1127, 1805], 9: [1659, 1598, 1428, 1390, 1724, 1411, 1838, 1745, 1590, 1089, 1194, 1595, 1613, 1442, 1555, 1674, 1710, 1794, 1343, 1687, 1438, 1490, 1468, 1266, 1122, 1669, 1230, 1728, 1801, 1163, 1765, 1692, 
1441, 1831, 1250, 1196, 1198, 1210, 1720, 1870, 1325, 1850, 1848]}
    grades = load_final_grades(filepath)
    prepared_data = prepare_data(grades, topic_mapping)
    k_stat, p_val, grouped_data = perform_kruskal_wallis(prepared_data)
    print(f"Kruskal-Wallis Statistic: {k_stat}, P-value: {p_val}")
    
    if p_val < 0.05:
        print("Significant differences found, performing Conover's post-hoc test...")
        posthoc_results = conover_posthoc_test(prepared_data)
        print(posthoc_results)
    
    plot_final_scores(prepared_data)

if __name__ == "__main__":
    main()
